# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class ZipCode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_zip_code: int=None, zip_code: str=None):  # noqa: E501
        """ZipCode - a model defined in Swagger

        :param id_zip_code: The id_zip_code of this ZipCode.  # noqa: E501
        :type id_zip_code: int
        :param zip_code: The zip_code of this ZipCode.  # noqa: E501
        :type zip_code: str
        """
        self.swagger_types = {
            'id_zip_code': int,
            'zip_code': str
        }

        self.attribute_map = {
            'id_zip_code': 'id_zip_code',
            'zip_code': 'zip_code'
        }
        self._id_zip_code = id_zip_code
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt) -> 'ZipCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ZipCode of this ZipCode.  # noqa: E501
        :rtype: ZipCode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_zip_code(self) -> int:
        """Gets the id_zip_code of this ZipCode.

        :return: The id_zip_code of this ZipCode.
        :rtype: int
        """
        return self._id_zip_code

    @id_zip_code.setter
    def id_zip_code(self, id_zip_code: int):
        """Sets the id_zip_code of this ZipCode.


        :param id_zip_code: The id_zip_code of this ZipCode.
        :type id_zip_code: int
        """
        if id_zip_code is None:
            raise ValueError("Invalid value for `id_zip_code`, must not be `None`")  # noqa: E501

        self._id_zip_code = id_zip_code

    @property
    def zip_code(self) -> str:
        """Gets the zip_code of this ZipCode.


        :return: The zip_code of this ZipCode.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: str):
        """Sets the zip_code of this ZipCode.


        :param zip_code: The zip_code of this ZipCode.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")  # noqa: E501

        self._zip_code = zip_code