# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class Municipality(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, municipality_id: int=None, name: str=None, state_id: int=None):  # noqa: E501
        """Municipality - a model defined in Swagger

        :param municipality_id: The municipality_id of this Municipality.  # noqa: E501
        :type municipality_id: int
        :param name: The name of this Municipality.  # noqa: E501
        :type name: str
        :param state_id: The state_id of this Municipality.  # noqa: E501
        :type state_id: int
        """
        self.swagger_types = {
            'municipality_id': int,
            'name': str,
            'state_id': int
        }

        self.attribute_map = {
            'municipality_id': 'municipalityId',
            'name': 'name',
            'state_id': 'stateId'
        }
        self._municipality_id = municipality_id
        self._name = name
        self._state_id = state_id

    @classmethod
    def from_dict(cls, dikt) -> 'Municipality':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Municipality of this Municipality.  # noqa: E501
        :rtype: Municipality
        """
        return util.deserialize_model(dikt, cls)

    @property
    def municipality_id(self) -> int:
        """Gets the municipality_id of this Municipality.


        :return: The municipality_id of this Municipality.
        :rtype: int
        """
        return self._municipality_id

    @municipality_id.setter
    def municipality_id(self, municipality_id: int):
        """Sets the municipality_id of this Municipality.


        :param municipality_id: The municipality_id of this Municipality.
        :type municipality_id: int
        """
        if municipality_id is None:
            raise ValueError("Invalid value for `municipality_id`, must not be `None`")  # noqa: E501

        self._municipality_id = municipality_id

    @property
    def name(self) -> str:
        """Gets the name of this Municipality.


        :return: The name of this Municipality.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Municipality.


        :param name: The name of this Municipality.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def state_id(self) -> int:
        """Gets the state_id of this Municipality.


        :return: The state_id of this Municipality.
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id: int):
        """Sets the state_id of this Municipality.


        :param state_id: The state_id of this Municipality.
        :type state_id: int
        """
        if state_id is None:
            raise ValueError("Invalid value for `state_id`, must not be `None`")  # noqa: E501

        self._state_id = state_id
