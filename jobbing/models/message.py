# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, message_id: int=None, entry: str=None, created: date=None, status: int=None, service_id: int=None, provider_id: int=None):  # noqa: E501
        """Message - a model defined in Swagger

        :param message_id: The message_id of this Message.  # noqa: E501
        :type message_id: int
        :param entry: The entry of this Message.  # noqa: E501
        :type entry: str
        :param created: The created of this Message.  # noqa: E501
        :type created: date
        :param status: The status of this Message.  # noqa: E501
        :type status: int
        :param service_id: The service_id of this Message.  # noqa: E501
        :type service_id: int
        :param provider_id: The provider_id of this Message.  # noqa: E501
        :type provider_id: int
        """
        self.swagger_types = {
            'message_id': int,
            'entry': str,
            'created': date,
            'status': int,
            'service_id': int,
            'provider_id': int
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'entry': 'entry',
            'created': 'created',
            'status': 'status',
            'service_id': 'serviceId',
            'provider_id': 'providerId'
        }
        self._message_id = message_id
        self._entry = entry
        self._created = created
        self._status = status
        self._service_id = service_id
        self._provider_id = provider_id

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self) -> int:
        """Gets the message_id of this Message.

        Primary key  # noqa: E501

        :return: The message_id of this Message.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: int):
        """Sets the message_id of this Message.

        Primary key  # noqa: E501

        :param message_id: The message_id of this Message.
        :type message_id: int
        """

        self._message_id = message_id

    @property
    def entry(self) -> str:
        """Gets the entry of this Message.

        Body of the Message  # noqa: E501

        :return: The entry of this Message.
        :rtype: str
        """
        return self._entry

    @entry.setter
    def entry(self, entry: str):
        """Sets the entry of this Message.

        Body of the Message  # noqa: E501

        :param entry: The entry of this Message.
        :type entry: str
        """
        if entry is None:
            raise ValueError("Invalid value for `entry`, must not be `None`")  # noqa: E501

        self._entry = entry

    @property
    def created(self) -> date:
        """Gets the created of this Message.

        Date when the message was created  # noqa: E501

        :return: The created of this Message.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created: date):
        """Sets the created of this Message.

        Date when the message was created  # noqa: E501

        :param created: The created of this Message.
        :type created: date
        """

        self._created = created

    @property
    def status(self) -> int:
        """Gets the status of this Message.

        Status of the messsage  # noqa: E501

        :return: The status of this Message.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Message.

        Status of the messsage  # noqa: E501

        :param status: The status of this Message.
        :type status: int
        """

        self._status = status

    @property
    def service_id(self) -> int:
        """Gets the service_id of this Message.

        Foreign key to possible requested Service  # noqa: E501

        :return: The service_id of this Message.
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: int):
        """Sets the service_id of this Message.

        Foreign key to possible requested Service  # noqa: E501

        :param service_id: The service_id of this Message.
        :type service_id: int
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def provider_id(self) -> int:
        """Gets the provider_id of this Message.

        Foreign key of the provider associated to the message  # noqa: E501

        :return: The provider_id of this Message.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: int):
        """Sets the provider_id of this Message.

        Foreign key of the provider associated to the message  # noqa: E501

        :param provider_id: The provider_id of this Message.
        :type provider_id: int
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id
