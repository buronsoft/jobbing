# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class Media(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, media_id: int=None, media: str=None, link: str=None, title: str=None, size: int=None, duration: str=None, created: date=None, media_type: str=None, views: int=None, likes: int=None, owner_id: int=None, album_id: int=None):  # noqa: E501
        """Media - a model defined in Swagger

        :param media_id: The media_id of this Media.  # noqa: E501
        :type media_id: int
        :param media: The media of this Media.  # noqa: E501
        :type media: str
        :param link: The link of this Media.  # noqa: E501
        :type link: str
        :param title: The title of this Media.  # noqa: E501
        :type title: str
        :param size: The size of this Media.  # noqa: E501
        :type size: int
        :param duration: The duration of this Media.  # noqa: E501
        :type duration: str
        :param created: The created of this Media.  # noqa: E501
        :type created: date
        :param media_type: The media_type of this Media.  # noqa: E501
        :type media_type: str
        :param views: The views of this Media.  # noqa: E501
        :type views: int
        :param likes: The likes of this Media.  # noqa: E501
        :type likes: int
        :param owner_id: The owner_id of this Media.  # noqa: E501
        :type owner_id: int
        :param album_id: The album_id of this Media.  # noqa: E501
        :type album_id: int
        """
        self.swagger_types = {
            'media_id': int,
            'media': str,
            'link': str,
            'title': str,
            'size': int,
            'duration': str,
            'created': date,
            'media_type': str,
            'views': int,
            'likes': int,
            'owner_id': int,
            'album_id': int
        }

        self.attribute_map = {
            'media_id': 'mediaId',
            'media': 'media',
            'link': 'link',
            'title': 'title',
            'size': 'size',
            'duration': 'duration',
            'created': 'created',
            'media_type': 'mediaType',
            'views': 'views',
            'likes': 'likes',
            'owner_id': 'ownerId',
            'album_id': 'albumId'
        }
        self._media_id = media_id
        self._media = media
        self._link = link
        self._title = title
        self._size = size
        self._duration = duration
        self._created = created
        self._media_type = media_type
        self._views = views
        self._likes = likes
        self._owner_id = owner_id
        self._album_id = album_id

    @classmethod
    def from_dict(cls, dikt) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Media of this Media.  # noqa: E501
        :rtype: Media
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_id(self) -> int:
        """Gets the media_id of this Media.

        Primary key  # noqa: E501

        :return: The media_id of this Media.
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id: int):
        """Sets the media_id of this Media.

        Primary key  # noqa: E501

        :param media_id: The media_id of this Media.
        :type media_id: int
        """

        self._media_id = media_id

    @property
    def media(self) -> str:
        """Gets the media of this Media.

        Media file  # noqa: E501

        :return: The media of this Media.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media: str):
        """Sets the media of this Media.

        Media file  # noqa: E501

        :param media: The media of this Media.
        :type media: str
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")  # noqa: E501

        self._media = media

    @property
    def link(self) -> str:
        """Gets the link of this Media.

        Videos to ilustrate the information  # noqa: E501

        :return: The link of this Media.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this Media.

        Videos to ilustrate the information  # noqa: E501

        :param link: The link of this Media.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def title(self) -> str:
        """Gets the title of this Media.

        Title to the video  # noqa: E501

        :return: The title of this Media.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Media.

        Title to the video  # noqa: E501

        :param title: The title of this Media.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def size(self) -> int:
        """Gets the size of this Media.

        Size of the video  # noqa: E501

        :return: The size of this Media.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Media.

        Size of the video  # noqa: E501

        :param size: The size of this Media.
        :type size: int
        """

        self._size = size

    @property
    def duration(self) -> str:
        """Gets the duration of this Media.

        Duration of the video  # noqa: E501

        :return: The duration of this Media.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this Media.

        Duration of the video  # noqa: E501

        :param duration: The duration of this Media.
        :type duration: str
        """

        self._duration = duration

    @property
    def created(self) -> date:
        """Gets the created of this Media.

        DATE  # noqa: E501

        :return: The created of this Media.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created: date):
        """Sets the created of this Media.

        DATE  # noqa: E501

        :param created: The created of this Media.
        :type created: date
        """

        self._created = created

    @property
    def media_type(self) -> str:
        """Gets the media_type of this Media.

        Type of the media  # noqa: E501

        :return: The media_type of this Media.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this Media.

        Type of the media  # noqa: E501

        :param media_type: The media_type of this Media.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type

    @property
    def views(self) -> int:
        """Gets the views of this Media.

        Views that the media has  # noqa: E501

        :return: The views of this Media.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views: int):
        """Sets the views of this Media.

        Views that the media has  # noqa: E501

        :param views: The views of this Media.
        :type views: int
        """

        self._views = views

    @property
    def likes(self) -> int:
        """Gets the likes of this Media.

        Numbers of likes in the media  # noqa: E501

        :return: The likes of this Media.
        :rtype: int
        """
        return self._likes

    @likes.setter
    def likes(self, likes: int):
        """Sets the likes of this Media.

        Numbers of likes in the media  # noqa: E501

        :param likes: The likes of this Media.
        :type likes: int
        """

        self._likes = likes

    @property
    def owner_id(self) -> int:
        """Gets the owner_id of this Media.

        Foreign key for the owner associated to this media  # noqa: E501

        :return: The owner_id of this Media.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: int):
        """Sets the owner_id of this Media.

        Foreign key for the owner associated to this media  # noqa: E501

        :param owner_id: The owner_id of this Media.
        :type owner_id: int
        """

        self._owner_id = owner_id

    @property
    def album_id(self) -> int:
        """Gets the album_id of this Media.

        Foreign key for the album associated to this media  # noqa: E501

        :return: The album_id of this Media.
        :rtype: int
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id: int):
        """Sets the album_id of this Media.

        Foreign key for the album associated to this media  # noqa: E501

        :param album_id: The album_id of this Media.
        :type album_id: int
        """

        self._album_id = album_id
