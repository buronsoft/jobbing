# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class Category(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, category_id: int=None, name: str=None, description: str=None, image_url: str=None, created: date=None, last_updated: date=None, status_id: int=None):  # noqa: E501
        """Category - a model defined in Swagger

        :param category_id: The category_id of this Category.  # noqa: E501
        :type category_id: int
        :param name: The name of this Category.  # noqa: E501
        :type name: str
        :param description: The description of this Category.  # noqa: E501
        :type description: str
        :param image_url: The image_url of this Category.  # noqa: E501
        :type image_url: str
        :param created: The created of this Category.  # noqa: E501
        :type created: date
        :param last_updated: The last_updated of this Category.  # noqa: E501
        :type last_updated: date
        :param status_id: The status_id of this Category.  # noqa: E501
        :type status_id: int
        """
        self.swagger_types = {
            'category_id': int,
            'name': str,
            'description': str,
            'image_url': str,
            'created': date,
            'last_updated': date,
            'status_id': int
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'name': 'name',
            'description': 'description',
            'image_url': 'imageUrl',
            'created': 'created',
            'last_updated': 'lastUpdated',
            'status_id': 'statusId'
        }
        self._category_id = category_id
        self._name = name
        self._description = description
        self._image_url = image_url
        self._created = created
        self._last_updated = last_updated
        self._status_id = status_id

    @classmethod
    def from_dict(cls, dikt) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Category of this Category.  # noqa: E501
        :rtype: Category
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self) -> int:
        """Gets the category_id of this Category.

        Primary key  # noqa: E501

        :return: The category_id of this Category.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this Category.

        Primary key  # noqa: E501

        :param category_id: The category_id of this Category.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def name(self) -> str:
        """Gets the name of this Category.

        Name of the categories, unique  # noqa: E501

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Category.

        Name of the categories, unique  # noqa: E501

        :param name: The name of this Category.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Category.

        A brief description of the category  # noqa: E501

        :return: The description of this Category.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Category.

        A brief description of the category  # noqa: E501

        :param description: The description of this Category.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_url(self) -> str:
        """Gets the image_url of this Category.

        Default image associated to the category  # noqa: E501

        :return: The image_url of this Category.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this Category.

        Default image associated to the category  # noqa: E501

        :param image_url: The image_url of this Category.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def created(self) -> date:
        """Gets the created of this Category.

        Date of creation of the category  # noqa: E501

        :return: The created of this Category.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created: date):
        """Sets the created of this Category.

        Date of creation of the category  # noqa: E501

        :param created: The created of this Category.
        :type created: date
        """

        self._created = created

    @property
    def last_updated(self) -> date:
        """Gets the last_updated of this Category.

        Last updated date  # noqa: E501

        :return: The last_updated of this Category.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: date):
        """Sets the last_updated of this Category.

        Last updated date  # noqa: E501

        :param last_updated: The last_updated of this Category.
        :type last_updated: date
        """

        self._last_updated = last_updated

    @property
    def status_id(self) -> int:
        """Gets the status_id of this Category.

        Status of this category  # noqa: E501

        :return: The status_id of this Category.
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id: int):
        """Sets the status_id of this Category.

        Status of this category  # noqa: E501

        :param status_id: The status_id of this Category.
        :type status_id: int
        """

        self._status_id = status_id
