# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address_id: int=None, address_line1: str=None, address_line2: str=None, neighborhood_id: int=None, muncipality_id: int=None, zip_code: str=None, state_id: int=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param address_id: The address_id of this Address.  # noqa: E501
        :type address_id: int
        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type address_line1: str
        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type address_line2: str
        :param neighborhood_id: The neighborhood_id of this Address.  # noqa: E501
        :type neighborhood_id: int
        :param muncipality_id: The muncipality_id of this Address.  # noqa: E501
        :type muncipality_id: int
        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type zip_code: str
        :param state_id: The state_id of this Address.  # noqa: E501
        :type state_id: int
        """
        self.swagger_types = {
            'address_id': int,
            'address_line1': str,
            'address_line2': str,
            'neighborhood_id': int,
            'muncipality_id': int,
            'zip_code': str,
            'state_id': int
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'neighborhood_id': 'neighborhoodId',
            'muncipality_id': 'muncipalityId',
            'zip_code': 'zipCode',
            'state_id': 'stateId'
        }
        self._address_id = address_id
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._neighborhood_id = neighborhood_id
        self._muncipality_id = muncipality_id
        self._zip_code = zip_code
        self._state_id = state_id

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self) -> int:
        """Gets the address_id of this Address.

        Unique id  # noqa: E501

        :return: The address_id of this Address.
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id: int):
        """Sets the address_id of this Address.

        Unique id  # noqa: E501

        :param address_id: The address_id of this Address.
        :type address_id: int
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")  # noqa: E501

        self._address_id = address_id

    @property
    def address_line1(self) -> str:
        """Gets the address_line1 of this Address.

        Suite/Apartment, Outer Number, Street  # noqa: E501

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1: str):
        """Sets the address_line1 of this Address.

        Suite/Apartment, Outer Number, Street  # noqa: E501

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self) -> str:
        """Gets the address_line2 of this Address.

        Suite/Apartment, Outer Number, Street  # noqa: E501

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2: str):
        """Sets the address_line2 of this Address.

        Suite/Apartment, Outer Number, Street  # noqa: E501

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def neighborhood_id(self) -> int:
        """Gets the neighborhood_id of this Address.

        Colony or Neighborhood  # noqa: E501

        :return: The neighborhood_id of this Address.
        :rtype: int
        """
        return self._neighborhood_id

    @neighborhood_id.setter
    def neighborhood_id(self, neighborhood_id: int):
        """Sets the neighborhood_id of this Address.

        Colony or Neighborhood  # noqa: E501

        :param neighborhood_id: The neighborhood_id of this Address.
        :type neighborhood_id: int
        """
        if neighborhood_id is None:
            raise ValueError("Invalid value for `neighborhood_id`, must not be `None`")  # noqa: E501

        self._neighborhood_id = neighborhood_id

    @property
    def muncipality_id(self) -> int:
        """Gets the muncipality_id of this Address.

        Muncipality  # noqa: E501

        :return: The muncipality_id of this Address.
        :rtype: int
        """
        return self._muncipality_id

    @muncipality_id.setter
    def muncipality_id(self, muncipality_id: int):
        """Sets the muncipality_id of this Address.

        Muncipality  # noqa: E501

        :param muncipality_id: The muncipality_id of this Address.
        :type muncipality_id: int
        """
        if muncipality_id is None:
            raise ValueError("Invalid value for `muncipality_id`, must not be `None`")  # noqa: E501

        self._muncipality_id = muncipality_id

    @property
    def zip_code(self) -> str:
        """Gets the zip_code of this Address.

        Zipcode  # noqa: E501

        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: str):
        """Sets the zip_code of this Address.

        Zipcode  # noqa: E501

        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")  # noqa: E501

        self._zip_code = zip_code

    @property
    def state_id(self) -> int:
        """Gets the state_id of this Address.

        Foreign key for State  # noqa: E501

        :return: The state_id of this Address.
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id: int):
        """Sets the state_id of this Address.

        Foreign key for State  # noqa: E501

        :param state_id: The state_id of this Address.
        :type state_id: int
        """
        if state_id is None:
            raise ValueError("Invalid value for `state_id`, must not be `None`")  # noqa: E501

        self._state_id = state_id
