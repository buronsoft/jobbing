# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class ServiceProvided(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, evaluation_id: int=None, rating: int=None, comment_entry: str=None, status: int=None, created: date=None, last_updated: date=None, service_id: int=None, client_id: int=None, provider_id: int=None):  # noqa: E501
        """ServiceProvided - a model defined in Swagger

        :param evaluation_id: The evaluation_id of this ServiceProvided.  # noqa: E501
        :type evaluation_id: int
        :param rating: The rating of this ServiceProvided.  # noqa: E501
        :type rating: int
        :param comment_entry: The comment_entry of this ServiceProvided.  # noqa: E501
        :type comment_entry: str
        :param status: The status of this ServiceProvided.  # noqa: E501
        :type status: int
        :param created: The created of this ServiceProvided.  # noqa: E501
        :type created: date
        :param last_updated: The last_updated of this ServiceProvided.  # noqa: E501
        :type last_updated: date
        :param service_id: The service_id of this ServiceProvided.  # noqa: E501
        :type service_id: int
        :param client_id: The client_id of this ServiceProvided.  # noqa: E501
        :type client_id: int
        :param provider_id: The provider_id of this ServiceProvided.  # noqa: E501
        :type provider_id: int
        """
        self.swagger_types = {
            'evaluation_id': int,
            'rating': int,
            'comment_entry': str,
            'status': int,
            'created': date,
            'last_updated': date,
            'service_id': int,
            'client_id': int,
            'provider_id': int
        }

        self.attribute_map = {
            'evaluation_id': 'evaluationId',
            'rating': 'rating',
            'comment_entry': 'commentEntry',
            'status': 'status',
            'created': 'created',
            'last_updated': 'lastUpdated',
            'service_id': 'serviceId',
            'client_id': 'clientId',
            'provider_id': 'providerId'
        }
        self._evaluation_id = evaluation_id
        self._rating = rating
        self._comment_entry = comment_entry
        self._status = status
        self._created = created
        self._last_updated = last_updated
        self._service_id = service_id
        self._client_id = client_id
        self._provider_id = provider_id

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceProvided':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceProvided of this ServiceProvided.  # noqa: E501
        :rtype: ServiceProvided
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_id(self) -> int:
        """Gets the evaluation_id of this ServiceProvided.

        primary key  # noqa: E501

        :return: The evaluation_id of this ServiceProvided.
        :rtype: int
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id: int):
        """Sets the evaluation_id of this ServiceProvided.

        primary key  # noqa: E501

        :param evaluation_id: The evaluation_id of this ServiceProvided.
        :type evaluation_id: int
        """

        self._evaluation_id = evaluation_id

    @property
    def rating(self) -> int:
        """Gets the rating of this ServiceProvided.

        number of stars (0 to 5)  # noqa: E501

        :return: The rating of this ServiceProvided.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this ServiceProvided.

        number of stars (0 to 5)  # noqa: E501

        :param rating: The rating of this ServiceProvided.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def comment_entry(self) -> str:
        """Gets the comment_entry of this ServiceProvided.

        Comment  # noqa: E501

        :return: The comment_entry of this ServiceProvided.
        :rtype: str
        """
        return self._comment_entry

    @comment_entry.setter
    def comment_entry(self, comment_entry: str):
        """Sets the comment_entry of this ServiceProvided.

        Comment  # noqa: E501

        :param comment_entry: The comment_entry of this ServiceProvided.
        :type comment_entry: str
        """
        if comment_entry is None:
            raise ValueError("Invalid value for `comment_entry`, must not be `None`")  # noqa: E501

        self._comment_entry = comment_entry

    @property
    def status(self) -> int:
        """Gets the status of this ServiceProvided.

        Status of the evaluation (requested, completed, abandoned, in process, canceled, ...)  # noqa: E501

        :return: The status of this ServiceProvided.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this ServiceProvided.

        Status of the evaluation (requested, completed, abandoned, in process, canceled, ...)  # noqa: E501

        :param status: The status of this ServiceProvided.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created(self) -> date:
        """Gets the created of this ServiceProvided.

        Date when the evaluation was created  # noqa: E501

        :return: The created of this ServiceProvided.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created: date):
        """Sets the created of this ServiceProvided.

        Date when the evaluation was created  # noqa: E501

        :param created: The created of this ServiceProvided.
        :type created: date
        """

        self._created = created

    @property
    def last_updated(self) -> date:
        """Gets the last_updated of this ServiceProvided.

        Date when the evaluation was updated  # noqa: E501

        :return: The last_updated of this ServiceProvided.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: date):
        """Sets the last_updated of this ServiceProvided.

        Date when the evaluation was updated  # noqa: E501

        :param last_updated: The last_updated of this ServiceProvided.
        :type last_updated: date
        """

        self._last_updated = last_updated

    @property
    def service_id(self) -> int:
        """Gets the service_id of this ServiceProvided.

        Foraign key to the catalog entry id associated to this evaluation  # noqa: E501

        :return: The service_id of this ServiceProvided.
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: int):
        """Sets the service_id of this ServiceProvided.

        Foraign key to the catalog entry id associated to this evaluation  # noqa: E501

        :param service_id: The service_id of this ServiceProvided.
        :type service_id: int
        """

        self._service_id = service_id

    @property
    def client_id(self) -> int:
        """Gets the client_id of this ServiceProvided.

        Foraign key to the user profile who contracted the service  # noqa: E501

        :return: The client_id of this ServiceProvided.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: int):
        """Sets the client_id of this ServiceProvided.

        Foraign key to the user profile who contracted the service  # noqa: E501

        :param client_id: The client_id of this ServiceProvided.
        :type client_id: int
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def provider_id(self) -> int:
        """Gets the provider_id of this ServiceProvided.

        Foraign key to the user profile who provided the service  # noqa: E501

        :return: The provider_id of this ServiceProvided.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: int):
        """Sets the provider_id of this ServiceProvided.

        Foraign key to the user profile who provided the service  # noqa: E501

        :param provider_id: The provider_id of this ServiceProvided.
        :type provider_id: int
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id
