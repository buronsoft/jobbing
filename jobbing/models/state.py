# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from jobbing.models.base_model_ import Model
from jobbing import util


class State(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, state_id: int=None, name: str=None, country_id: int=None):  # noqa: E501
        """State - a model defined in Swagger

        :param state_id: The state_id of this State.  # noqa: E501
        :type state_id: int
        :param name: The name of this State.  # noqa: E501
        :type name: str
        :param country_id: The country_id of this State.  # noqa: E501
        :type country_id: int
        """
        self.swagger_types = {
            'state_id': int,
            'name': str,
            'country_id': int
        }

        self.attribute_map = {
            'state_id': 'stateId',
            'name': 'name',
            'country_id': 'countryId'
        }
        self._state_id = state_id
        self._name = name
        self._country_id = country_id

    @classmethod
    def from_dict(cls, dikt) -> 'State':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The State of this State.  # noqa: E501
        :rtype: State
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_id(self) -> int:
        """Gets the state_id of this State.


        :return: The state_id of this State.
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id: int):
        """Sets the state_id of this State.


        :param state_id: The state_id of this State.
        :type state_id: int
        """
        if state_id is None:
            raise ValueError("Invalid value for `state_id`, must not be `None`")  # noqa: E501

        self._state_id = state_id

    @property
    def name(self) -> str:
        """Gets the name of this State.


        :return: The name of this State.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this State.


        :param name: The name of this State.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def country_id(self) -> int:
        """Gets the country_id of this State.


        :return: The country_id of this State.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: int):
        """Sets the country_id of this State.


        :param country_id: The country_id of this State.
        :type country_id: int
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")  # noqa: E501

        self._country_id = country_id
